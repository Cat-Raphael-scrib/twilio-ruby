##
# This code was generated by
# \ / _    _  _|   _  _
#  | (_)\/(_)(_|\/| |(/_  v1.0.0
#       /       /
#
# frozen_string_literal: true

require 'spec_helper.rb'

describe 'DeviceCode' do
  it "can create" do
    @holodeck.mock(Twilio::Response.new(500, ''))

    expect {
      @client.oauth.v1.device_code.create(client_sid: 'client_sid', scopes: ['scopes'])
    }.to raise_exception(Twilio::REST::TwilioError)

    values = {'ClientSid' => 'client_sid', 'Scopes' => Twilio.serialize_list(['scopes']) { |e| e }, }
    expect(
    @holodeck.has_request?(Holodeck::Request.new(
        method: 'post',
        url: 'https://oauth.twilio.com/v1/device/code',
        data: values,
    ))).to eq(true)
  end

  it "receives create responses" do
    @holodeck.mock(Twilio::Response.new(
        201,
      %q[
      {
          "device_code": "LiwuhE0bIhqemK6sd34tXfobVCR9yrk0",
          "user_code": "Hkf1WaID3",
          "verification_uri": "v1/oauth2/device/activate",
          "verification_uri_complete": "v1/oauth2/device/activate?user_code=Hkf1WaID3",
          "expires_in": 299,
          "interval": 5
      }
      ]
    ))

    actual = @client.oauth.v1.device_code.create(client_sid: 'client_sid', scopes: ['scopes'])

    expect(actual).to_not eq(nil)
  end
end